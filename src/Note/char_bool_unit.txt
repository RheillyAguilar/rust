
 let c1: char = 'a';
 assert_eq!(size_of_val(&c1),4); 
 let c2: char = 'ä¸­';
 assert_eq!(size_of_val(&c2),4); 

 let _f: bool = false;
 let t: bool= true;
 if t {
     println!("Success!");
 }

 let f: bool = false;
 let t: bool = true && false;
 assert_eq!(t, f);

 let unit: () = ();
 assert!(size_of_val(&unit) == 0);


 let c1: char = 'ä¸­';
 print_char(c1);
 fn print_char(c : char) {
 println!("{}", c);
 }
    
 let _v: () = ();
 let v: (i32, i32) = (2, 3);
 assert_eq!(_v, implicitly_ret_unit());
 println!("Success!");
 }
 fn implicitly_ret_unit() {
 println!("I will return a ()");
 }
 Don't use this one
 fn explicitly_ret_unit() -> () {
 println!("I will return a ()");
 }