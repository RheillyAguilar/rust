
let x: i32 = 5;
let p: &i32 = &x;
println!("the memory address of x is {:p}", p);

let x: i32 = 5;
let y: &i32= &x;
assert_eq!(5, *y);

let mut s: String = String::from("hello, ");
borrow_object(&s);

let mut s: String = String::from("hello, ");
push_str(&mut s);
println!("Success!");
}
fn push_str(s: &mut String) {
    s.push_str("world")
}

let mut s = String::from("hello, ");
let p: &mut String = &mut s;
p.push_str("world");

let c: char = 'ä¸­';
let r1: &char = &c;
let ref r2 = c;
assert_eq!(*r1, *r2);
assert_eq!(get_addr(r1),get_addr(r2));
println!("Success!");
}
fn get_addr(r: &char) -> String {
    format!("{:p}", r)
}

let mut s = String::from("hello");
let r1 = &s;
let r2 = &s;
println!("{}, {}", r1, r2);

let mut  s = String::from("hello, ");
borrow_object(&mut s);
println!("Success!");
}
fn borrow_object(s: &mut String) {}

let mut s: String = String::from("hello, ");
borrow_object(&s);
s.push_str("world");
println!("Success!");
}   
fn borrow_object(s: &String) {}

let mut s: String = String::from("hello, ");
let r1: &mut String = &mut s;
r1.push_str("world");
let r2: &mut String  = &mut s;
r2.push_str("!");
println!("{}",r2);


