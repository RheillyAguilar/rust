     
     let x: i32 = 5;
     let mut y = 5;
     y = x;
     let z: i32 = 10;  Type of z ? 

     let x: u32 = 5;
     assert_eq!("u32".to_string(), type_of(&x));
     }

     fn type_of<T>(_: &T) -> String {    
     format!("{}", std::any::type_name::<T>())

     let x: f64 = 1_000.000_1;  ?   
     let y: f32 = 0.12;  f32
     let z: f64 = 0.01_f64;  f64
     assert_eq!(type_of(&x), "f64".to_string());
     }
     fn type_of<T>(_: &T) -> String {
     format!("{}", std::any::type_name::<T>())
     assert!(0.1 as f32+0.2 as f32==0.3);

     let mut sum = 0;
     for i in -3..2 {
         sum += i
     }
     assert!(sum == -5);
     for c in 'a'..='z' {
         println!("{}",c as u8);
     }
     assert_eq!((1..5), Range{ start: 1, end: 5 });
     assert_eq!((1..=5), RangeInclusive::new(1, 5));

     
      assert!(1u32 + 2u32 == 3u32);
      assert!(1i32 - 2i32 == -1i32);
      assert!(1i8 - 2i8 == -1);
      assert!(3 * 50 == 150);
      assert!(9.6 as f32 / 3.2 as f32 == 3.0 as f32);  
      assert!(24 % 5 == 4);
      assert!(true && false == false);
      assert!(true || false == true);
      assert!(!true == false);
      println!("0011 AND 0101 is {:04b}", 0b0011u32 & 0b0101);
      println!("0011 OR 0101 is {:04b}", 0b0011u32 | 0b0101);
      println!("0011 XOR 0101 is {:04b}", 0b0011u32 ^ 0b0101);
      println!("1 << 5 is {}", 1u32 << 5);
      println!("0x80 >> 2 is 0x{:x}", 0x80u32 >> 2);
