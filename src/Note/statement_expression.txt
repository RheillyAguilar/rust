   
 let x: u32 = 5u32;
 let y: u32 = {
     let x_squared = x * x;
     let x_cube = x_squared * x;
     This expression will be assigned to `y`
     x_cube + x_squared + x
 };
 let z = {
     The semicolon suppresses this expression and `()` is assigned to `z`
     2 * x
 };
 println!("x is {:?}", x);
 println!("y is {:?}", y);
 println!("z is {:?}", z);

 let v: i32 = {
     let mut x: i32 = 1;
     x = x + 2;
     x
 };
 assert_eq!(v, 3);

 let v: () = {
     let mut x = 1;
     x += 2
 };
 assert_eq!(v, ());

 let v: i32 = {
     let x = 3;
     x
           
    };
 assert!(v == 3);
 let s: i32 = sum(1 , 2);
 assert_eq!(s, 3);
     println!("Success!");
 }
 fn sum(x: i32, y: i32) -> i32 {
     x + y
 }
    