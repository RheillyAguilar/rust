trait Hello {
    fn say_hi(&self) -> String {
        String::from("hi")
    }
    fn say_something(&self) -> String;
}
struct Student {}
impl Hello for Student {
    // Overriding say_something for Student
    fn say_something(&self) -> String {
        String::from("I'm a good student")
    }
}
struct Teacher {}
impl Hello for Teacher {
    // Overriding say_hi for Teacher
    fn say_hi(&self) -> String {
        String::from("Hi, I'm your new teacher")
    }
    // Overriding say_something for Teacher
    fn say_something(&self) -> String {
        String::from("I'm not a bad teacher")
    }
}
fn main() {
    let s = Student {};
    assert_eq!(s.say_hi(), "hi");
    assert_eq!(s.say_something(), "I'm a good student");
    let t = Teacher {};
    assert_eq!(t.say_hi(), "Hi, I'm your new teacher");
    assert_eq!(t.say_something(), "I'm not a bad teacher");
    println!("Success!");
}



// `Centimeters`, a tuple struct that can be compared
#[derive(PartialEq, PartialOrd)]
struct Centimeters(f64);
// `Inches`, a tuple struct that can be printed
#[derive(Debug)]
struct Inches(i32);
impl Inches {
    fn to_centimeters(&self) -> Centimeters {
        let &Inches(inches) = self;
        Centimeters(inches as f64 * 2.54)
    }
}
// ADD some attributes to make the code work!
// DON'T modify other code!
#[derive(Debug, PartialEq, PartialOrd)] // Derive `Debug`, `PartialEq`, and `PartialOrd` for Seconds
struct Seconds(i32);
fn main() {
    let _one_second = Seconds(1);
    println!("One second looks like: {:?}", _one_second);
    let _this_is_true = (_one_second == _one_second);
    let _this_is_false = (_one_second > _one_second);
    let foot = Inches(12);
    println!("One foot equals {:?}", foot);
    let meter = Centimeters(100.0);
    let cmp =
        if foot.to_centimeters() < meter {
            "smaller"
        } else {
            "bigger"
        };
    println!("One foot is {} than one meter.", cmp);
}


use std::ops::Mul;
// Implement the multiply function
fn multiply<T: Mul<Output = T>>(a: T, b: T) -> T {
    a * b
}
fn main() {
    assert_eq!(6, multiply(2u8, 3u8));    // u8 multiplication
    assert_eq!(5.0, multiply(1.0, 5.0));  // f64 multiplication
    println!("Success!");
}





















