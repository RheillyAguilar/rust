fn main() {  
   let mut s = String::from("hello, world");
   let slice1: &str = &s[..]; // First way: Slice entire string
   assert_eq!(slice1, "hello, world");
   let slice2 = &s[..5]; // Second way: Slice the first part ("hello")
   assert_eq!(slice2, "hello");
   let slice3: &mut String = &mut s; // Mutable reference to the original string
   slice3.push('!'); // Add '!' to the string
   assert_eq!(slice3, "hello, world!");
   println!("Success!");
}



// Question: how many heap allocations are happening here?
// Your answer: 
fn main() {  
    // Create a String type based on `&str`
    // The type of string literals is `&str`
    let s: String = String::from("hello, world!");
   // Create a slice point to String `s`
   let slice: &str = &s;
   // Create a String type based on the recently created slice
let s: String = slice.to_string();
   assert_eq!(s, "hello, world!");
   println!("Success!");
}

fn main() {
    let mut s = String::new();
    s.push_str("hello");  // Add a string to the mutable String
    // Some bytes, in a vector
    let v = vec![104, 101, 108, 108, 111];
    // Turn a byte's vector into a String
    let s1 = String::from_utf8(v).unwrap();  // Convert the byte vector into a String
    assert_eq!(s, s1);
    println!("Success!");
}


fn main() {
    let mut s = String::with_capacity(25);  // Initialize with enough capacity for three "hello" strings
    println!("{}", s.capacity());  // Should print 25 initially
    for _ in 0..2 {
        s.push_str("hello");
        println!("{}", s.capacity());  // This will print 25 after the first loop and stay 25
    }
    println!("Success!");
}

use std::mem;

fn main() {
    let story = String::from("Rust By Practice");
    // Prevent automatically dropping of the String's data
    let mut story = mem::ManuallyDrop::new(story);
    let ptr = story.as_ptr();         // Get the raw pointer to the string data
    let len = story.len();            // Get the length of the string
    let capacity = story.capacity();  // Get the capacity of the string
    assert_eq!(16, len);
    // We can rebuild a String out of ptr, len, and capacity. This is all
    // unsafe because we are responsible for making sure the components are
    // valid:
    let s = unsafe { String::from_raw_parts(ptr as *mut u8, len, capacity) };
    assert_eq!(*story, s);
    println!("Success!");
}
